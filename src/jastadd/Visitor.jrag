aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Func node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdDeclStmt node, Object data);
		public Object visit(IdDeclAss node, Object data);
		public Object visit(Assign node, Object data);
		public Object visit(ReturnStmt node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(FuncStmt node, Object data);
		public Object visit(IfStmt node, Object data);
		public Object visit(ElseStmt node, Object data);
		public Object visit(Equals node, Object data);
		public Object visit(NotEquals node, Object data);
		public Object visit(LessThan node, Object data);
		public Object visit(LessEqual node, Object data);
		public Object visit(GreaterThan node, Object data);
		public Object visit(GreaterEqual node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Numeral node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(FuncUse node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Func.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Block.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDeclStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDeclAss.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Assign.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ReturnStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object WhileStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FuncStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IfStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ElseStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Equals.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NotEquals.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LessThan.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LessEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreaterThan.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreaterEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FuncUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
